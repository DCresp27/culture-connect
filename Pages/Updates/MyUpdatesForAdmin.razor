@page "/myupdatesforadmin"

@inject NavigationManager NavigationManager
@using Super_Jew_2._0.Backend.Services
@using Super_Jew_2._0.Backend.Database
@using Super_Jew_2._0.Backend
@using Super_Jew_2._0.Backend.ShulRequests
@using Super_Jew_2._0.Backend.ShulServices;
@inject NavigationManager Nav
@inject IJSRuntime JSRuntime


<h3><span class="myupdates-title">MyUpdates</span>&trade;</h3>
<button @onclick="AddEvent" class="btn btn-secondary">Add Shul Event</button>
<button @onclick="DeleteEvent" class="btn btn-secondary">Delete Shul Event</button>

@if (shulList != null && shulList.Count > 0) // Ensure there are shuls to display
{
    <div class="container">
        <div class="row">
            @foreach (var shul in shulList)
            {
                <div class="col-sm-4">
                    <EditableShulCardForAdmin CurrentShul="@shul" OnSubmit="HandleSubmit" />
                </div>
            }
        </div>
    </div>
}
else
{
    <p>No shuls available to display.</p>
    // A message when no shuls are available
}


<h3>Admin Review Page</h3>

@if (gabbaisSubmittedRequests.Count > 0)
{
    <div class="container">
        <div class="row">
            @foreach (var request in gabbaisSubmittedRequests)
            {
                if (request.ApprovalStatus == "Awaiting Decision")
                {
                    <div class="col-sm-4">
                        <AdminShulReviewCard Request="@request" OnDecisionMade="HandleDecision" />
                    </div>
                }
            }
        </div>
    </div>
}
else
{
    <div class="card-title">
        <h5 class="card-title">No Requests at the moment!</h5>
    </div>
}



@code {
    List<Shul> shulList = new List<Shul>();
    List<ShulRequest> gabbaisSubmittedRequests;
    User user;
    User currentuser = UserService.CurrentUser; 
    
    protected override void OnInitialized()
    {
        shulList = ShulService.GetAllAvailableShuls();
        
        gabbaisSubmittedRequests = ShulService.GetGabbaiRequestsSubmissionsForAdmin();
        //Console.WriteLine("IN INIT FOR GABAI CUNT FOR HIS SHULLS: " + gabbaisSubmittedRequests.Count);
    }
    
    
    private async Task HandleSubmit(Shul updatedShul)
    {
        Console.WriteLine(updatedShul.ShulID);
        
        if (ShulService.UpdateShulDetails(updatedShul))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Shul Updated!");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error!");
        }
            
    // Code to handle the submission of the updated shul information
    }
    
    private async Task HandleRemoveRequest(int requestId)
    {
        ShulService.ClearGabbaiShulAdditionStatus(requestId);
    }
    
    private void AddEvent()
    {
        Nav.NavigateTo("/createshuleventforadmin"); // Replace with the actual route
    }
    
    private void DeleteEvent()
    {
        Nav.NavigateTo("/deleteshuleventforadmin"); // Replace with the actual route
    }
    
    private async Task RefreshRequests()
    {
    // Logic to load requests, similar to RefreshUserShuls
    }
    
    private async Task HandleDecision((int requestId, string decision, ShulRequest request) decisionInfo)
    {
    // Call the backend service with the decision
        await ShulService.AdminShulSubmitionDecision(decisionInfo.requestId, decisionInfo.decision, decisionInfo.request);
        gabbaisSubmittedRequests = gabbaisSubmittedRequests.Where(r => r.RequestID != decisionInfo.requestId).ToList();
        StateHasChanged();
    }

    
}