@using Super_Jew_2._0.Backend
@using Super_Jew_2._0.Backend.Services
@using Super_Jew_2._0.Backend.ShulServices
@inject Super_Jew_2._0.Backend.Services.ShulService ShulService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager



@code {
    [Parameter]
    public Shul CurrentShul { get; set; }

    [Parameter]
    public bool IsFullCard { get; set; } = false;

    [Parameter]
    public String Location { get; set;}

    [Parameter]
    public String ContactInfo { get; set; }


    [Parameter]
    public EventCallback OnCardClick { get; set; }


    private User? user; 


    private void CardClicked()
    {
        OnCardClick.InvokeAsync(null);
    }

    private async Task SubscribeToShul()
    {
        
        try
        {
            //var username = "john_doe"; // Replace with actual logic to get username
            //var password = "password123"; // Replace with actual logic to get password

            var currentUser = UserService.CurrentUser; 
            
            user = ShulService.GetFollowedShulsForUser(currentUser.Username, UserService.UserPassword);
            //UserService.SetCurrentUser(currentUser);
            
            if (user != null)
            {
                bool exists = false;
                foreach (Shul shul in user.FollowedShuls)
                {
                    if (shul.ShulID == CurrentShul.ShulID)
                    {
                        await JSRuntime.InvokeVoidAsync("alert", "You are already subscribed to this Shul!");
                        exists = true;
                    }
                }

                if (!exists)
                {
                    ShulService.AddShulToUserProfile(user.UserID, CurrentShul.ShulID);
                    await JSRuntime.InvokeVoidAsync("alert", "Subscription successful!");    
                    //NavigationManager.NavigateTo("/MyShuls");   // can choose to nav to myshuls or stay on same page
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "User not found, credentials incorrect, or other error.");
            }
        }
        catch (Exception ex)
        {
            
        }
                              
    }

    
}

@if (IsFullCard)
{
    <div class="card" @onclick="CardClicked">
        <div class="card-header">@CurrentShul.ShulName</div>
        <div class="data-field"><strong>Location:</strong> @CurrentShul.Location</div>
        <div class="data-field"><strong>Gabbai:</strong> @CurrentShul.ContactInfo</div>

        <div class="container">
            <div class="row">
                <div class="col-sm-3">
                    <button class="btn btn-lg" @onclick="SubscribeToShul">
                        <span>Subscribe!</span>
                    </button>
                </div>
            </div>
        </div>
    </div>


}
else
{
    <div class="card-name-box" @onclick="CardClicked">@CurrentShul.ShulName</div>
}

