@page "/myupdates"

@inject NavigationManager NavigationManager
@using Super_Jew_2._0.Backend.Services
@using Super_Jew_2._0.Backend.Database
@using Super_Jew_2._0.Backend
@using Super_Jew_2._0.Backend.ShulServices;
@inject IJSRuntime JSRuntime


<h3><span class="myupdates-title">MyUpdates</span>&trade;</h3>

@if (shulList != null && shulList.Count > 0) // Ensure there are shuls to display
{
    <div class="container">
        <div class="row">
            @foreach (var shul in shulList)
            {
                <div class="col-sm-4">
                    <!-- Pass the shul object to the EditableShulCard component -->
                    <EditableShulCard CurrentShul="@shul" OnSubmit="HandleSubmit" />
                </div>
            }
        </div>
    </div>
}
else
{
    <p>No shuls available to display.</p>
    // A message when no shuls are available
}


@code {
    ShulService ShulService = new ShulService();
    List<Shul> shulList = new List<Shul>(); 
    User user;
    UserService UserService = new UserService();
    User currentuser = UserService.CurrentUser; 


    //private String password = "password123";
    //private String username = "john_doe";

    protected override void OnInitialized()
    {


        shulList = ShulService.GetGabbaisShuls(currentuser.UserID.ToString());
        
        
        if (shulList.Count == 0)
        {
            //TODO ADD MESSAGE ON PAGE THAT THIS GABBAI HAS NO PAGES, NOT A THROW EXCEPTION
            throw new InvalidOperationException("Shul List is empty"); 
        }

        // Hardcoding 5 fake shuls
    }
    

    private async Task HandleSubmit(Shul updatedShul)
    {
        Console.WriteLine("SHUL ID --");
        Console.WriteLine(updatedShul.ShulID);
        
        if (ShulService.UpdateShulDetails(updatedShul))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Shul Updated!");
                //
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Error!");
        }
            
    // Code to handle the submission of the updated shul information
    }


}