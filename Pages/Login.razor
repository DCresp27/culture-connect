@page "/login"
@using Super_Jew_2._0.Models
@using Super_Jew_2._0.Backend.Services

@inject ShulService ShulService
@inject NavigationManager NavigationManager

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
    <InputText id="username" @bind-Value="@loginModel.Username" />
    <InputText id="password" type="password" @bind-Value="@loginModel.Password" />
    <button type="submit">Login</button>
    <button @onclick="HandleCreateAccount">Create Account</button>
</EditForm>

@code {
    private LoginModel loginModel = new LoginModel();

    private async Task HandleLogin()
    {
        var user =  ShulService.GetFollowedShulsForUser(loginModel.Username, loginModel.Password);
        Console.WriteLine("out of shul login method");
        if (user != null)
        {
            Console.WriteLine("ACCOUNT TYPE: " + user.AccountType.ToUpper());
            switch (user.AccountType.ToUpper()) // Make sure to match the case exactly
            {
                case "ADMIN":
                    NavigationManager.NavigateTo("/admin-dashboard");
                    break;
                case "GABBAI":
                    NavigationManager.NavigateTo("/gabai-dashboard");
                    break;
                case "USER":
                    Console.WriteLine("we got a user!");
                    NavigationManager.NavigateTo("/user-dashboard");
                    break;
                default:
    // Handle unknown account type or show an error message
                    break;
            }
        }
        else
        {
            Console.WriteLine("user null");
        }
        {
    // Handle login failure, show an error message, etc.
        }
    }


    private void HandleCreateAccount()
    {
        // Logic for handling account creation will go here
    }
}
